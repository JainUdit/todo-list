{"version":3,"sources":["redux-app/constants/index.ts","redux-app/actions/index.ts","redux-app/enums/index.ts","redux-app/components/Style.ts","redux-app/components/FilterButton.tsx","redux-app/components/TodoLine.tsx","redux-app/components/TodoWrapper.tsx","redux-app/components/AddTodo.tsx","redux-app/components/TaskBox.tsx","redux-app/containers/ConnectedFilterButton.tsx","redux-app/containers/ConnectedTodoWrapper.tsx","redux-app/containers/ConnectedAddTodo.tsx","redux-app/index.ts","redux-app/reducers/markTodoCompleteReducer.ts","redux-app/reducers/deleteTodoReducer.ts","redux-app/reducers/addTodoReducer.ts","redux-app/reducers/todoListRootReducer.ts","redux-app/selectors/getFilteredTodos.ts","redux-app/middlewares/restrictMultipleEntries.ts","redux-app/actions/TodoActions.ts","redux-app/interfaces/index.ts","redux-app/store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ADD_TODO","DELETE_TODO","MARK_TODO_COMPLETE","FILTER_TODO","RESTRICTED_WORD_OPEN_ALERT","RESTRICTED_WORD_CLOSE_ALERT","Filter","StyledButton","styled","Button","props","isactive","StyledTaskBox","Grid","StyledTodoLine","StyledTodoWrapper","StyledAddTodo","FilterButton","container","direction","justify","alignItems","item","xs","todoList","length","Object","keys","map","filter","id","key","filterType","toString","onClick","TodoLine","text","completed","IconButton","color","onCompleteClick","onDelete","TodoWrapper","todos","todo","AddTodo","React","task","setTask","handleClick","onAdd","TextField","className","label","variant","value","onChange","event","restrictedWordAlertOpen","onAlertClose","target","onKeyPress","autoComplete","Alert","severity","TaskBox","ConnectedFilterButton","connect","state","domain","dispatch","setFilter","ConnectedTodoWrapper","getFilteredTodos","markTodoComplete","deleteTodo","ConnectedAddTodo","taskName","addTodo","restrictedWordCloseAlert","markTodoCompleteReducer","action","list","payload","deleteTodoReducer","addTodoReducer","concat","todoListRootReducer","type","ALL","ACTIVE","COMPLETED","restrictMultipleEntries","store","next","getState","find","restrictedWordOpenAlert","todoId","preloadedState","configureStore","reducer","combineReducers","middleware","getDefaultMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.372fb142.chunk.js","sourcesContent":["export const ADD_TODO: string = 'ADD_TODO';\r\nexport const DELETE_TODO: string = 'DELETE_TODO';\r\nexport const MARK_TODO_COMPLETE: string = \"MARK_TODO_COMPLETE\";\r\nexport const FILTER_TODO: string = 'FILTER_TODO';\r\nexport const RESTRICTED_WORD_OPEN_ALERT: string = 'RESTRICTED_WORD_OPEN_ALERT';\r\nexport const RESTRICTED_WORD_CLOSE_ALERT: string = 'RESTRICTED_WORD_CLOSE_ALERT';","export * from './BaseAction';\r\nexport * from './TodoActions';","export enum Filter {\r\n    ALL = 'ALL',\r\n    ACTIVE = 'ACTIVE',\r\n    COMPLETED = \"COMPLETED\"\r\n}","import styled from '@emotion/styled'\r\nimport { Button, Grid } from '@material-ui/core'\r\n\r\n\r\nexport const StyledButton = styled(Button)<{ isactive: string }>(\r\n    (props) => `\r\n    color: ${props.isactive === 'true' ? 'blue' : 'black'};\r\n    margin: 4px;\r\n`);\r\n\r\nexport const StyledTaskBox = styled(Grid)`\r\n    border: 1px solid #ccc;\r\n    margin: 16px;\r\n    box-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12);\r\n    border-radius: 16px;\r\n    background-color: #e2e2e2;\r\n`;\r\n\r\nexport const StyledTodoLine = styled(Grid)`\r\n    border: 1px solid #ccc;\r\n    padding: 8px 16px;\r\n    box-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12);\r\n    border-radius: 40px;\r\n    margin-bottom: 8px;\r\n    background-color: #fff;\r\n`\r\n\r\nexport const StyledTodoWrapper = styled(Grid)`\r\n    padding: 8px;\r\n`\r\n\r\nexport const StyledAddTodo = styled(Grid)`\r\n    margin: 10px;\r\n\r\n    .addTasksField{\r\n        width: 50%;\r\n    }\r\n\r\n    .alertBar{\r\n        margin: 5px;\r\n    }\r\n`","import * as React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Filter } from '../enums';\r\nimport { IFilterButtonProps } from \"../interfaces\";\r\nimport { StyledButton } from './Style';\r\n\r\nexport const FilterButton = (props: IFilterButtonProps): React.ReactElement => {\r\n    return (\r\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            <Grid container item xs={2} direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                <span>{`ALL(${props.todoList.length})`}</span>\r\n            </Grid>\r\n            <Grid container item xs={10} direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                {Object.keys(Filter).map(filter => {\r\n                    return <StyledButton id={`${filter}_filter`} key={filter} isactive={(props.filterType === filter).toString()} onClick={() => props.onClick(Filter[filter])}>{filter}</StyledButton>\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Grid, IconButton } from '@material-ui/core';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { ITodoLineProps } from \"../interfaces\";\r\nimport { StyledTodoLine } from './Style';\r\n\r\nexport const TodoLine = (props: ITodoLineProps): React.ReactElement => {\r\n    return (\r\n        <StyledTodoLine container direction='row'>\r\n            <Grid container item xs={8} justify=\"flex-start\" alignItems=\"center\">{props.text}</Grid>\r\n            <Grid container direction=\"row\" item xs={4} justify=\"flex-end\" alignItems=\"center\">\r\n                {!props.completed &&\r\n                    <IconButton id={`tickIcon_${props.text}`} color=\"primary\" onClick={props.onCompleteClick}>\r\n                        <DoneIcon />\r\n                    </IconButton>\r\n                }\r\n                <IconButton id={`deleteIcon_${props.text}`} color=\"secondary\" onClick={props.onDelete} >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n        </StyledTodoLine>\r\n    )\r\n} ","import * as React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { ITodoWrapperProps } from \"../interfaces\";\r\nimport { StyledTodoWrapper } from './Style';\r\nimport { TodoLine } from \"./TodoLine\";\r\n\r\nexport const TodoWrapper = (props: ITodoWrapperProps): React.ReactElement => {\r\n    return (\r\n        <StyledTodoWrapper container>\r\n            {props.todos.length === 0\r\n                ? <Grid container justify=\"center\" alignItems=\"center\">No data found.</Grid>\r\n                : props.todos.map(todo => (\r\n                    <TodoLine\r\n                        key={todo.id}\r\n                        text={todo.text}\r\n                        completed={todo.completed}\r\n                        onCompleteClick={() => props.onCompleteClick(todo.id)}\r\n                        onDelete={() => props.onDelete(todo.id)}\r\n                    />\r\n                ))}\r\n        </StyledTodoWrapper>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Grid, IconButton, TextField } from \"@material-ui/core\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { IAddTodoProps } from '../interfaces';\r\nimport { StyledAddTodo } from './Style';\r\n\r\nexport const AddTodo = (props: IAddTodoProps): React.ReactElement => {\r\n    const [task, setTask] = React.useState<string>('');\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\r\n        props.restrictedWordAlertOpen && props.onAlertClose();\r\n        setTask(event.target.value);\r\n    }\r\n\r\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>): void => {\r\n        if (event.key === 'Enter') {\r\n            handleClick();\r\n        }\r\n    }\r\n\r\n    const handleClick = (): void => {\r\n        task && props.onAdd(task);\r\n        setTask('');\r\n    }\r\n\r\n    return (\r\n        <StyledAddTodo container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                <TextField id=\"newTask\" className=\"addTasksField\" label=\"Add new task\" variant=\"outlined\" value={task} onChange={handleChange} onKeyPress={handleKeyPress} autoComplete='off' />\r\n                <IconButton id=\"sendIcon\" color=\"primary\" onClick={handleClick}>\r\n                    <SendIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            {props.restrictedWordAlertOpen && <Alert severity=\"error\" className=\"alertBar\">This task already exists - try adding a new one!</Alert>}\r\n        </StyledAddTodo>\r\n    )\r\n}","import * as React from \"react\";\r\nimport { ConnectedFilterButton, ConnectedTodoWrapper } from \"../containers\";\r\nimport { StyledTaskBox } from \"./Style\";\r\n\r\nexport const TaskBox = (): React.ReactElement => (\r\n    <StyledTaskBox container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        <ConnectedTodoWrapper />\r\n        <ConnectedFilterButton />\r\n    </StyledTaskBox>\r\n)","import { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { setFilter } from '../actions';\r\nimport { FilterButton } from '../components';\r\nimport { ITodo, ITodoListGlobalState } from '../interfaces';\r\nimport { Filter } from '../enums';\r\n\r\ninterface IStateProps {\r\n    todoList: Array<ITodo>;\r\n    filterType: Filter;\r\n}\r\n\r\ninterface IDispatchProps {\r\n    onClick: (filterType: Filter) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: ITodoListGlobalState): IStateProps => ({\r\n    todoList: state.domain.todoList,\r\n    filterType: state.domain.filterType\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchProps => ({\r\n    onClick: (filterType: Filter) => dispatch(setFilter(filterType))\r\n});\r\n\r\nexport const ConnectedFilterButton = connect(mapStateToProps, mapDispatchToProps)(FilterButton)","import { Dispatch } from \"redux\";\r\nimport { connect } from 'react-redux';\r\nimport { deleteTodo, markTodoComplete } from \"../actions\";\r\nimport { TodoWrapper } from \"../components\";\r\nimport { ITodo, ITodoListGlobalState } from \"../interfaces\";\r\nimport { getFilteredTodos } from \"../selectors\";\r\n\r\ninterface IStateProps {\r\n    todos: Array<ITodo>\r\n}\r\n\r\ninterface IDispatchProps {\r\n    onCompleteClick: (id: number) => void;\r\n    onDelete: (id: number) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: ITodoListGlobalState): IStateProps => ({\r\n    todos: getFilteredTodos(state)\r\n});\r\n\r\nconst mapDispatchToPrpos = (dispatch: Dispatch): IDispatchProps => ({\r\n    onCompleteClick: (id: number) => dispatch(markTodoComplete(id)),\r\n    onDelete: (id: number) => dispatch(deleteTodo(id))\r\n});\r\n\r\nexport const ConnectedTodoWrapper = connect(mapStateToProps, mapDispatchToPrpos)(TodoWrapper);","import { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo, restrictedWordCloseAlert } from '../actions';\r\nimport { AddTodo } from '../components';\r\nimport { ITodoListGlobalState } from '../interfaces';\r\n\r\ninterface IStateProps {\r\n    restrictedWordAlertOpen: boolean;\r\n}\r\n\r\ninterface IDispatchProps {\r\n    onAdd: (taskName: string) => void;\r\n    onAlertClose: () => void;\r\n}\r\n\r\nconst mapStateToProps = (state: ITodoListGlobalState): IStateProps => ({\r\n    restrictedWordAlertOpen: state.domain.restrictedWordAlertOpen\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchProps => ({\r\n    onAdd: (taskName: string) => dispatch(addTodo(taskName)),\r\n    onAlertClose: () => dispatch(restrictedWordCloseAlert())\r\n});\r\n\r\nexport const ConnectedAddTodo = connect(mapStateToProps, mapDispatchToProps)(AddTodo);\r\n\r\n","export * from './actions';\r\nexport * from './components';\r\nexport * from './constants';\r\nexport * from './containers';\r\nexport * from './enums';\r\nexport * from './interfaces';\r\nexport * from './reducers';\r\nexport * from './selectors';\r\nexport * from './store';\r\nexport * from './middlewares';","import { IMarkTodoComplete } from \"../actions\";\r\nimport { ITodo, ITodoListState } from \"../interfaces\";\r\n\r\nexport const markTodoCompleteReducer = (\r\n    state: ITodoListState,\r\n    action: IMarkTodoComplete\r\n): ITodoListState => {\r\n    const list: Array<ITodo> = state.todoList.map(todo =>\r\n        todo.id === action.payload.id\r\n            ? { ...todo, completed: !todo.completed }\r\n            : todo\r\n    )\r\n    return {\r\n        ...state,\r\n        todoList: list\r\n    }\r\n};","import { IDeleteTodo } from \"../actions\";\r\nimport { ITodo, ITodoListState } from \"../interfaces\";\r\n\r\nexport const deleteTodoReducer = (\r\n    state: ITodoListState,\r\n    action: IDeleteTodo\r\n): ITodoListState => {\r\n    const list: Array<ITodo> = state.todoList.filter(todo =>\r\n        todo.id !== action.payload.id\r\n    );\r\n    return {\r\n        ...state,\r\n        todoList: list\r\n    }\r\n};","import { IAddTodo } from \"../actions\";\r\nimport { ITodo, ITodoListState } from \"../interfaces\";\r\n\r\nexport const addTodoReducer = (\r\n    state: ITodoListState,\r\n    action: IAddTodo\r\n): ITodoListState => {\r\n    const list: Array<ITodo> = state.todoList.concat(action.payload);\r\n    return {\r\n        ...state,\r\n        todoList: list\r\n    }\r\n};","import { Reducer } from \"redux\";\r\nimport { BaseAction } from \"../actions\";\r\nimport { ITodoListState } from \"../interfaces\";\r\nimport { deleteTodoReducer } from \"./deleteTodoReducer\";\r\nimport { markTodoCompleteReducer } from \"./markTodoCompleteReducer\";\r\nimport { addTodoReducer } from \"./addTodoReducer\";\r\nimport {\r\n    ADD_TODO,\r\n    DELETE_TODO,\r\n    FILTER_TODO,\r\n    MARK_TODO_COMPLETE,\r\n    RESTRICTED_WORD_CLOSE_ALERT,\r\n    RESTRICTED_WORD_OPEN_ALERT\r\n} from \"../constants\";\r\n\r\nexport const todoListRootReducer: Reducer<ITodoListState, BaseAction<any>> = (\r\n    state: ITodoListState = {} as ITodoListState,\r\n    action: BaseAction<any>\r\n): ITodoListState => {\r\n    switch (action.type) {\r\n        case ADD_TODO: {\r\n            return addTodoReducer(state, action);\r\n        }\r\n        case DELETE_TODO: {\r\n            return deleteTodoReducer(state, action);\r\n        }\r\n        case MARK_TODO_COMPLETE: {\r\n            return markTodoCompleteReducer(state, action);\r\n        }\r\n        case FILTER_TODO:\r\n            return { ...state, filterType: action.payload.filter };\r\n        case RESTRICTED_WORD_OPEN_ALERT:\r\n            return { ...state, restrictedWordAlertOpen: true };\r\n        case RESTRICTED_WORD_CLOSE_ALERT:\r\n            return { ...state, restrictedWordAlertOpen: false };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};","import { Filter } from \"../enums\";\r\nimport { ITodo, ITodoListGlobalState } from \"../interfaces\";\r\n\r\nexport const getFilteredTodos = (state: ITodoListGlobalState): Array<ITodo> => {\r\n    switch (state.domain.filterType) {\r\n        case Filter.ALL:\r\n            return state.domain.todoList;\r\n        case Filter.ACTIVE:\r\n            return state.domain.todoList.filter(todo => !todo.completed);\r\n        case Filter.COMPLETED:\r\n            return state.domain.todoList.filter(todo => todo.completed);\r\n\r\n        default:\r\n            return state.domain.todoList;\r\n    }\r\n}","import { restrictedWordOpenAlert } from \"../actions\";\r\nimport { ITodoListGlobalState } from \"../interfaces\"\r\n\r\nexport const restrictMultipleEntries = store => next => action => {\r\n    const state: ITodoListGlobalState = store.getState();\r\n\r\n    if (state.domain.todoList.find(todo => todo.text === action.payload.text)) {\r\n        next(restrictedWordOpenAlert());\r\n    }\r\n    else {\r\n        return next(action);\r\n    }\r\n}","import {\r\n    ADD_TODO,\r\n    DELETE_TODO,\r\n    FILTER_TODO,\r\n    MARK_TODO_COMPLETE,\r\n    RESTRICTED_WORD_CLOSE_ALERT,\r\n    RESTRICTED_WORD_OPEN_ALERT\r\n} from \"../constants\";\r\nimport { Filter } from \"../enums\";\r\nimport { ITodo } from \"../interfaces\";\r\nimport { BaseAction } from \"./BaseAction\";\r\n\r\n/**\r\n * These interfaces defines type for actions.\r\n */\r\nexport interface IAddTodo extends BaseAction<ITodo> { }\r\nexport interface IDeleteTodo extends BaseAction<{ id: number }> { }\r\nexport interface IMarkTodoComplete extends BaseAction<{ id: number }> { }\r\nexport interface IFilterTodo extends BaseAction<{ filter: Filter }> { }\r\nexport interface IRestrictedWord extends BaseAction<{}> { }\r\n\r\nlet todoId: number = 1;\r\nexport const addTodo: (text: string) => IAddTodo = (text) => ({\r\n    type: ADD_TODO,\r\n    payload: { id: todoId++, text, completed: false }\r\n});\r\n\r\nexport const deleteTodo: (id: number) => IDeleteTodo = (id) => ({\r\n    type: DELETE_TODO,\r\n    payload: { id }\r\n})\r\n\r\nexport const markTodoComplete: (id: number) => IMarkTodoComplete = (id) => ({\r\n    type: MARK_TODO_COMPLETE,\r\n    payload: { id }\r\n})\r\n\r\nexport const setFilter: (filter: Filter) => IFilterTodo = (filter) => ({\r\n    type: FILTER_TODO,\r\n    payload: { filter }\r\n})\r\n\r\nexport const restrictedWordOpenAlert: () => IRestrictedWord = () => ({\r\n    type: RESTRICTED_WORD_OPEN_ALERT,\r\n    payload: {}\r\n})\r\n\r\nexport const restrictedWordCloseAlert: () => IRestrictedWord = () => ({\r\n    type: RESTRICTED_WORD_CLOSE_ALERT,\r\n    payload: {}\r\n})","export * from './ITodo';\r\nexport * from './ITodoListState';\r\nexport * from './ITodoLineProps';\r\nexport * from './ITodoWrapperProps';\r\nexport * from './IFilterButtonProps';\r\nexport * from './ITodoListGlobalState';\r\nexport * from './IAddTodoProps';\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { Filter } from \"../enums\";\r\nimport { ITodo } from \"../interfaces\";\r\nimport { restrictMultipleEntries } from \"../middlewares\";\r\nimport { todoListRootReducer } from '../reducers';\r\n\r\nconst preloadedState = {\r\n    domain: {\r\n        todoList: [{\r\n            id: 0,\r\n            text: \"Bhopal\",\r\n            completed: false\r\n        }] as Array<ITodo>,\r\n        filterType: Filter.ALL,\r\n        restrictedWordAlertOpen: false\r\n    }\r\n}\r\n\r\nexport const store = configureStore({\r\n    reducer: combineReducers({\r\n        domain: todoListRootReducer\r\n    }),\r\n    preloadedState,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(restrictMultipleEntries)\r\n});\r\n","import * as React from 'react';\nimport './App.css';\nimport { ConnectedAddTodo, TaskBox } from './redux-app';\nimport { Grid } from '@material-ui/core';\n\nconst App = (): React.ReactElement => (\n  <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n    <Grid container justify=\"center\" alignItems=\"center\"><h1>Todos</h1></Grid>\n    <Grid container><ConnectedAddTodo /></Grid>\n    <Grid container><TaskBox /></Grid>\n  </Grid>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux-app';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}